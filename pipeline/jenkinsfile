@Library('mlops-shared-library') _

pipeline {
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    agent any

    parameters {
        string(name: "MODEL_NAME", defaultValue: 'diabetes-prediction', description: 'Name of the model')
        string(name: "DOCKER_REGISTRY", defaultValue: 'docker.io', description: 'Docker registry URL')
        string(name: "DOCKER_CREDENTIALS_ID", defaultValue: 'docker-registry', description: 'Credentials ID for Docker registry')
        booleanParam(name: "HAS_API", defaultValue: true, description: 'Does the model have an API?')
        booleanParam(name: "USE_HELM", defaultValue: false, description: 'Use Helm for deployment?')
        booleanParam(name: "USE_MLFLOW", defaultValue: false, description: 'Use MLflow for tracking?')
        booleanParam(name: "RUN_LOAD_TESTS", defaultValue: false, description: 'Run load tests?')
        booleanParam(name: "SKIP_TESTS", defaultValue: false, description: 'Skip testing stages?')
        choice(name: "ENVIRONMENT", choices: ['dev', 'staging', 'prod'], description: 'Deployment environment')
    }

    stages {
        stage("init environment") {
            steps {
                script {
                    def config = [
                        // Basic and Common Variables
                        modelName: params.MODEL_NAME,
                        dockerRegistry: params.DOCKER_REGISTRY,
                        dockerCredentialsId: params.DOCKER_CREDENTIALS_ID,
                        dockerImage: "${params.DOCKER_REGISTRY}/${params.MODEL_NAME}:${env.BUILD_NUMBER}",
                        dockerImageLatest: "${params.DOCKER_REGISTRY}/${params.MODEL_NAME}:latest",
                        helmChartPath: "./deployment/helm",
                        helmChartName: "${params.MODEL_NAME}-chart",
                        environment: params.ENVIRONMENT,
                        buildNumber: env.BUILD_NUMBER,
                        
                        // Git Information
                        gitCommit: env.GIT_COMMIT ?: sh(returnStdout: true, script: 'git rev-parse HEAD').trim(),
                        gitBranch: env.BRANCH_NAME ?: 'main',

                        // Feature Flags
                        hasApi: params.HAS_API,
                        useHelm: params.USE_HELM,
                        useMlflow: params.USE_MLFLOW,
                        runLoadTests: params.RUN_LOAD_TESTS,
                        runSecurityTests: true,
                        runSmokeTests: true,
                        autoRollback: true,
                        skipTests: params.SKIP_TESTS,
                        
                        // Monitoring
                        enablePrometheus: true,
                        enableGrafana: false,
                        enableAlerting: false,
                        
                        // Paths
                        srcPath: 'src',
                        testsPath: 'tests',
                        modelsPath: 'models',
                        requirementsFile: 'requirements.txt',
                        
                        // Notifications
                        emailRecipients: 'manhhung20033004@gmail.com'
                    ]

                    env.PIPELINE_CONFIG = writeJSON returnText: true, json: config
                    echo "Pipeline configuration initialized: ${env.PIPELINE_CONFIG}"
                    echo "Environment: ${params.ENVIRONMENT}"
                    echo "Model Name: ${params.MODEL_NAME}"
                    echo "Features: API=${config.hasApi}, Helm=${config.useHelm}, MLflow=${config.useMlflow}"

                }
            }
        }
        stage("Data Validation") {
            when {
                not{
                    expression {
                        def config = readJSON text: env.PIPELINE_CONFIG
                        return config.skipTests
                    }
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    dataValidation(config)
                }
            }
        }
        stage("Model training") {
            when {
                not {
                    expression {
                        def config = readJSON text: env.PIPELINE_CONFIG
                        return config.skipTests
                    }
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelTraining(config)
                }
            }
        }
        stage("Model Validation"){
            when {
                not {
                    expression {
                        def config = readJSON text: env.PIPELINE_CONFIG
                        return config.skipTests
                    }
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelValidation(config)
                }
            }
        }
        stage("Model Testing") {
            when {
                not {
                    expression {
                        def config = readJSON text: env.PIPELINE_CONFIG
                        return config.skipTests
                    }
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelTesting(config)
                }
            }
        }
        stage("Model Packaging") {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelPackaging(config)
                }
            }
        }
        stage("Model Deployment") {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelDeployment(config)
                }
            }
        }
        stage("Model Monitoring Setup") {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    modelMonitoringSetup(config)
                }
            }
        }
        stage("Send Notifications") {
            steps {
                script {
                    def config = readJSON text: env.PIPELINE_CONFIG
                    sendNotifications(config)
                }
            }
        }
    }
}